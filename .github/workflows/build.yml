name: Go (Build & Unit test)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CGO_ENABLED: 0

permissions:
  contents: read
  pull-requests: read # allows SonarCloud to decorate PRs with analysis results

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-24.04
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Download module and all dependencies
      run: go mod download

    - name: Build all relevant packages
      run:  go build -v ./cmd/...
  
    - name: Test relevant packages
      run:  go test -v -cover -coverprofile=coverage.out ./...

    - name: Upload Test results
      uses: actions/upload-artifact@v4
      with:
        name: test-coverage
        path: coverage.out
  
  vet:
    name: Go Vet / Format
    runs-on: ubuntu-24.04
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run go vet
      run: go vet ./...
    
    - name: Run gofmt
      run: res="$(gofmt -d -l -s ./)" && echo "$res" && test -z "$res"
   
  analysis:
    name: Analyze with Sonar Cloud
    needs: build
    runs-on: ubuntu-24.04
    steps:
    
    - name: Check out code for Sonar Analysis
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download Test results
      uses: actions/download-artifact@v4
      with:
        name: test-coverage
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
