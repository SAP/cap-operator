/*
SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	smesapcomv1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
	applyconfigurationsmesapcomv1alpha1 "github.com/sap/cap-operator/pkg/client/applyconfiguration/sme.sap.com/v1alpha1"
	scheme "github.com/sap/cap-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// DomainsGetter has a method to return a DomainInterface.
// A group's client should implement this interface.
type DomainsGetter interface {
	Domains(namespace string) DomainInterface
}

// DomainInterface has methods to work with Domain resources.
type DomainInterface interface {
	Create(ctx context.Context, domain *smesapcomv1alpha1.Domain, opts v1.CreateOptions) (*smesapcomv1alpha1.Domain, error)
	Update(ctx context.Context, domain *smesapcomv1alpha1.Domain, opts v1.UpdateOptions) (*smesapcomv1alpha1.Domain, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, domain *smesapcomv1alpha1.Domain, opts v1.UpdateOptions) (*smesapcomv1alpha1.Domain, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*smesapcomv1alpha1.Domain, error)
	List(ctx context.Context, opts v1.ListOptions) (*smesapcomv1alpha1.DomainList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *smesapcomv1alpha1.Domain, err error)
	Apply(ctx context.Context, domain *applyconfigurationsmesapcomv1alpha1.DomainApplyConfiguration, opts v1.ApplyOptions) (result *smesapcomv1alpha1.Domain, err error)
	// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
	ApplyStatus(ctx context.Context, domain *applyconfigurationsmesapcomv1alpha1.DomainApplyConfiguration, opts v1.ApplyOptions) (result *smesapcomv1alpha1.Domain, err error)
	DomainExpansion
}

// domains implements DomainInterface
type domains struct {
	*gentype.ClientWithListAndApply[*smesapcomv1alpha1.Domain, *smesapcomv1alpha1.DomainList, *applyconfigurationsmesapcomv1alpha1.DomainApplyConfiguration]
}

// newDomains returns a Domains
func newDomains(c *SmeV1alpha1Client, namespace string) *domains {
	return &domains{
		gentype.NewClientWithListAndApply[*smesapcomv1alpha1.Domain, *smesapcomv1alpha1.DomainList, *applyconfigurationsmesapcomv1alpha1.DomainApplyConfiguration](
			"domains",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *smesapcomv1alpha1.Domain { return &smesapcomv1alpha1.Domain{} },
			func() *smesapcomv1alpha1.DomainList { return &smesapcomv1alpha1.DomainList{} },
		),
	}
}
