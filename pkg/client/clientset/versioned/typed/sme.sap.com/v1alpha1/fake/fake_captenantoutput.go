/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
	smesapcomv1alpha1 "github.com/sap/cap-operator/pkg/client/applyconfiguration/sme.sap.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeCAPTenantOutputs implements CAPTenantOutputInterface
type FakeCAPTenantOutputs struct {
	Fake *FakeSmeV1alpha1
	ns   string
}

var captenantoutputsResource = v1alpha1.SchemeGroupVersion.WithResource("captenantoutputs")

var captenantoutputsKind = v1alpha1.SchemeGroupVersion.WithKind("CAPTenantOutput")

// Get takes name of the cAPTenantOutput, and returns the corresponding cAPTenantOutput object, and an error if there is any.
func (c *FakeCAPTenantOutputs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.CAPTenantOutput, err error) {
	emptyResult := &v1alpha1.CAPTenantOutput{}
	obj, err := c.Fake.
		Invokes(testing.NewGetActionWithOptions(captenantoutputsResource, c.ns, name, options), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.CAPTenantOutput), err
}

// List takes label and field selectors, and returns the list of CAPTenantOutputs that match those selectors.
func (c *FakeCAPTenantOutputs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.CAPTenantOutputList, err error) {
	emptyResult := &v1alpha1.CAPTenantOutputList{}
	obj, err := c.Fake.
		Invokes(testing.NewListActionWithOptions(captenantoutputsResource, captenantoutputsKind, c.ns, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.CAPTenantOutputList{ListMeta: obj.(*v1alpha1.CAPTenantOutputList).ListMeta}
	for _, item := range obj.(*v1alpha1.CAPTenantOutputList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested cAPTenantOutputs.
func (c *FakeCAPTenantOutputs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchActionWithOptions(captenantoutputsResource, c.ns, opts))

}

// Create takes the representation of a cAPTenantOutput and creates it.  Returns the server's representation of the cAPTenantOutput, and an error, if there is any.
func (c *FakeCAPTenantOutputs) Create(ctx context.Context, cAPTenantOutput *v1alpha1.CAPTenantOutput, opts v1.CreateOptions) (result *v1alpha1.CAPTenantOutput, err error) {
	emptyResult := &v1alpha1.CAPTenantOutput{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateActionWithOptions(captenantoutputsResource, c.ns, cAPTenantOutput, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.CAPTenantOutput), err
}

// Update takes the representation of a cAPTenantOutput and updates it. Returns the server's representation of the cAPTenantOutput, and an error, if there is any.
func (c *FakeCAPTenantOutputs) Update(ctx context.Context, cAPTenantOutput *v1alpha1.CAPTenantOutput, opts v1.UpdateOptions) (result *v1alpha1.CAPTenantOutput, err error) {
	emptyResult := &v1alpha1.CAPTenantOutput{}
	obj, err := c.Fake.
		Invokes(testing.NewUpdateActionWithOptions(captenantoutputsResource, c.ns, cAPTenantOutput, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.CAPTenantOutput), err
}

// Delete takes name of the cAPTenantOutput and deletes it. Returns an error if one occurs.
func (c *FakeCAPTenantOutputs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(captenantoutputsResource, c.ns, name, opts), &v1alpha1.CAPTenantOutput{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeCAPTenantOutputs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionActionWithOptions(captenantoutputsResource, c.ns, opts, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.CAPTenantOutputList{})
	return err
}

// Patch applies the patch and returns the patched cAPTenantOutput.
func (c *FakeCAPTenantOutputs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.CAPTenantOutput, err error) {
	emptyResult := &v1alpha1.CAPTenantOutput{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(captenantoutputsResource, c.ns, name, pt, data, opts, subresources...), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.CAPTenantOutput), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied cAPTenantOutput.
func (c *FakeCAPTenantOutputs) Apply(ctx context.Context, cAPTenantOutput *smesapcomv1alpha1.CAPTenantOutputApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.CAPTenantOutput, err error) {
	if cAPTenantOutput == nil {
		return nil, fmt.Errorf("cAPTenantOutput provided to Apply must not be nil")
	}
	data, err := json.Marshal(cAPTenantOutput)
	if err != nil {
		return nil, err
	}
	name := cAPTenantOutput.Name
	if name == nil {
		return nil, fmt.Errorf("cAPTenantOutput.Name must be provided to Apply")
	}
	emptyResult := &v1alpha1.CAPTenantOutput{}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceActionWithOptions(captenantoutputsResource, c.ns, *name, types.ApplyPatchType, data, opts.ToPatchOptions()), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1alpha1.CAPTenantOutput), err
}
