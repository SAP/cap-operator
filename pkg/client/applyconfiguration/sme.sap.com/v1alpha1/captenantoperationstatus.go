/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	smesapcomv1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CAPTenantOperationStatusApplyConfiguration represents an declarative configuration of the CAPTenantOperationStatus type for use
// with apply.
type CAPTenantOperationStatusApplyConfiguration struct {
	GenericStatusApplyConfiguration `json:",inline"`
	State                           *smesapcomv1alpha1.CAPTenantOperationState `json:"state,omitempty"`
	CurrentStep                     *uint32                                    `json:"currentStep,omitempty"`
	ActiveJob                       *string                                    `json:"activeJob,omitempty"`
}

// CAPTenantOperationStatusApplyConfiguration constructs an declarative configuration of the CAPTenantOperationStatus type for use with
// apply.
func CAPTenantOperationStatus() *CAPTenantOperationStatusApplyConfiguration {
	return &CAPTenantOperationStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *CAPTenantOperationStatusApplyConfiguration) WithObservedGeneration(value int64) *CAPTenantOperationStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CAPTenantOperationStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *CAPTenantOperationStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *CAPTenantOperationStatusApplyConfiguration) WithState(value smesapcomv1alpha1.CAPTenantOperationState) *CAPTenantOperationStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithCurrentStep sets the CurrentStep field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentStep field is set to the value of the last call.
func (b *CAPTenantOperationStatusApplyConfiguration) WithCurrentStep(value uint32) *CAPTenantOperationStatusApplyConfiguration {
	b.CurrentStep = &value
	return b
}

// WithActiveJob sets the ActiveJob field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ActiveJob field is set to the value of the last call.
func (b *CAPTenantOperationStatusApplyConfiguration) WithActiveJob(value string) *CAPTenantOperationStatusApplyConfiguration {
	b.ActiveJob = &value
	return b
}
