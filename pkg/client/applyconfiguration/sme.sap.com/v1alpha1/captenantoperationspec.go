/*
SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/
// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
)

// CAPTenantOperationSpecApplyConfiguration represents an declarative configuration of the CAPTenantOperationSpec type for use
// with apply.
type CAPTenantOperationSpecApplyConfiguration struct {
	Operation                                 *v1alpha1.CAPTenantOperationType `json:"operation,omitempty"`
	BTPTenantIdentificationApplyConfiguration `json:",inline"`
	CAPApplicationVersionInstance             *string                                    `json:"capApplicationVersionInstance,omitempty"`
	Steps                                     []CAPTenantOperationStepApplyConfiguration `json:"steps,omitempty"`
}

// CAPTenantOperationSpecApplyConfiguration constructs an declarative configuration of the CAPTenantOperationSpec type for use with
// apply.
func CAPTenantOperationSpec() *CAPTenantOperationSpecApplyConfiguration {
	return &CAPTenantOperationSpecApplyConfiguration{}
}

// WithOperation sets the Operation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Operation field is set to the value of the last call.
func (b *CAPTenantOperationSpecApplyConfiguration) WithOperation(value v1alpha1.CAPTenantOperationType) *CAPTenantOperationSpecApplyConfiguration {
	b.Operation = &value
	return b
}

// WithSubDomain sets the SubDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubDomain field is set to the value of the last call.
func (b *CAPTenantOperationSpecApplyConfiguration) WithSubDomain(value string) *CAPTenantOperationSpecApplyConfiguration {
	b.SubDomain = &value
	return b
}

// WithTenantId sets the TenantId field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TenantId field is set to the value of the last call.
func (b *CAPTenantOperationSpecApplyConfiguration) WithTenantId(value string) *CAPTenantOperationSpecApplyConfiguration {
	b.TenantId = &value
	return b
}

// WithCAPApplicationVersionInstance sets the CAPApplicationVersionInstance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CAPApplicationVersionInstance field is set to the value of the last call.
func (b *CAPTenantOperationSpecApplyConfiguration) WithCAPApplicationVersionInstance(value string) *CAPTenantOperationSpecApplyConfiguration {
	b.CAPApplicationVersionInstance = &value
	return b
}

// WithSteps adds the given value to the Steps field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Steps field.
func (b *CAPTenantOperationSpecApplyConfiguration) WithSteps(values ...*CAPTenantOperationStepApplyConfiguration) *CAPTenantOperationSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSteps")
		}
		b.Steps = append(b.Steps, *values[i])
	}
	return b
}
