/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// TenantOperationsApplyConfiguration represents an declarative configuration of the TenantOperations type for use
// with apply.
type TenantOperationsApplyConfiguration struct {
	Provisioning   []TenantOperationWorkloadReferenceApplyConfiguration `json:"provisioning,omitempty"`
	Upgrade        []TenantOperationWorkloadReferenceApplyConfiguration `json:"upgrade,omitempty"`
	Deprovisioning []TenantOperationWorkloadReferenceApplyConfiguration `json:"deprovisioning,omitempty"`
}

// TenantOperationsApplyConfiguration constructs an declarative configuration of the TenantOperations type for use with
// apply.
func TenantOperations() *TenantOperationsApplyConfiguration {
	return &TenantOperationsApplyConfiguration{}
}

// WithProvisioning adds the given value to the Provisioning field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Provisioning field.
func (b *TenantOperationsApplyConfiguration) WithProvisioning(values ...*TenantOperationWorkloadReferenceApplyConfiguration) *TenantOperationsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithProvisioning")
		}
		b.Provisioning = append(b.Provisioning, *values[i])
	}
	return b
}

// WithUpgrade adds the given value to the Upgrade field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Upgrade field.
func (b *TenantOperationsApplyConfiguration) WithUpgrade(values ...*TenantOperationWorkloadReferenceApplyConfiguration) *TenantOperationsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUpgrade")
		}
		b.Upgrade = append(b.Upgrade, *values[i])
	}
	return b
}

// WithDeprovisioning adds the given value to the Deprovisioning field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Deprovisioning field.
func (b *TenantOperationsApplyConfiguration) WithDeprovisioning(values ...*TenantOperationWorkloadReferenceApplyConfiguration) *TenantOperationsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDeprovisioning")
		}
		b.Deprovisioning = append(b.Deprovisioning, *values[i])
	}
	return b
}
