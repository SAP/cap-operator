/*
SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ServiceExposureApplyConfiguration represents a declarative configuration of the ServiceExposure type for use
// with apply.
type ServiceExposureApplyConfiguration struct {
	SubDomain *string                   `json:"subDomain,omitempty"`
	Routes    []RouteApplyConfiguration `json:"routes,omitempty"`
}

// ServiceExposureApplyConfiguration constructs a declarative configuration of the ServiceExposure type for use with
// apply.
func ServiceExposure() *ServiceExposureApplyConfiguration {
	return &ServiceExposureApplyConfiguration{}
}

// WithSubDomain sets the SubDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SubDomain field is set to the value of the last call.
func (b *ServiceExposureApplyConfiguration) WithSubDomain(value string) *ServiceExposureApplyConfiguration {
	b.SubDomain = &value
	return b
}

// WithRoutes adds the given value to the Routes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Routes field.
func (b *ServiceExposureApplyConfiguration) WithRoutes(values ...*RouteApplyConfiguration) *ServiceExposureApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRoutes")
		}
		b.Routes = append(b.Routes, *values[i])
	}
	return b
}
