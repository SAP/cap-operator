/*
SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// CAPApplicationVersionSpecApplyConfiguration represents an declarative configuration of the CAPApplicationVersionSpec type for use
// with apply.
type CAPApplicationVersionSpecApplyConfiguration struct {
	CAPApplicationInstance *string                             `json:"capApplicationInstance,omitempty"`
	Version                *string                             `json:"version,omitempty"`
	RegistrySecrets        []string                            `json:"registrySecrets,omitempty"`
	Workloads              []WorkloadDetailsApplyConfiguration `json:"workloads,omitempty"`
	TenantOperations       *TenantOperationsApplyConfiguration `json:"tenantOperations,omitempty"`
	ContentJobs            []string                            `json:"contentJobs,omitempty"`
}

// CAPApplicationVersionSpecApplyConfiguration constructs an declarative configuration of the CAPApplicationVersionSpec type for use with
// apply.
func CAPApplicationVersionSpec() *CAPApplicationVersionSpecApplyConfiguration {
	return &CAPApplicationVersionSpecApplyConfiguration{}
}

// WithCAPApplicationInstance sets the CAPApplicationInstance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CAPApplicationInstance field is set to the value of the last call.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithCAPApplicationInstance(value string) *CAPApplicationVersionSpecApplyConfiguration {
	b.CAPApplicationInstance = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithVersion(value string) *CAPApplicationVersionSpecApplyConfiguration {
	b.Version = &value
	return b
}

// WithRegistrySecrets adds the given value to the RegistrySecrets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RegistrySecrets field.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithRegistrySecrets(values ...string) *CAPApplicationVersionSpecApplyConfiguration {
	for i := range values {
		b.RegistrySecrets = append(b.RegistrySecrets, values[i])
	}
	return b
}

// WithWorkloads adds the given value to the Workloads field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Workloads field.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithWorkloads(values ...*WorkloadDetailsApplyConfiguration) *CAPApplicationVersionSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithWorkloads")
		}
		b.Workloads = append(b.Workloads, *values[i])
	}
	return b
}

// WithTenantOperations sets the TenantOperations field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TenantOperations field is set to the value of the last call.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithTenantOperations(value *TenantOperationsApplyConfiguration) *CAPApplicationVersionSpecApplyConfiguration {
	b.TenantOperations = value
	return b
}

// WithContentJobs adds the given value to the ContentJobs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ContentJobs field.
func (b *CAPApplicationVersionSpecApplyConfiguration) WithContentJobs(values ...string) *CAPApplicationVersionSpecApplyConfiguration {
	for i := range values {
		b.ContentJobs = append(b.ContentJobs, values[i])
	}
	return b
}
