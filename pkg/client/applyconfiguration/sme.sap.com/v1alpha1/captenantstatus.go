/*
SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	smesapcomv1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// CAPTenantStatusApplyConfiguration represents a declarative configuration of the CAPTenantStatus type for use
// with apply.
type CAPTenantStatusApplyConfiguration struct {
	GenericStatusApplyConfiguration      `json:",inline"`
	State                                *smesapcomv1alpha1.CAPTenantState `json:"state,omitempty"`
	CurrentCAPApplicationVersionInstance *string                           `json:"currentCAPApplicationVersionInstance,omitempty"`
	PreviousCAPApplicationVersions       []string                          `json:"previousCAPApplicationVersions,omitempty"`
	LastFullReconciliationTime           *v1.Time                          `json:"lastFullReconciliationTime,omitempty"`
}

// CAPTenantStatusApplyConfiguration constructs a declarative configuration of the CAPTenantStatus type for use with
// apply.
func CAPTenantStatus() *CAPTenantStatusApplyConfiguration {
	return &CAPTenantStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *CAPTenantStatusApplyConfiguration) WithObservedGeneration(value int64) *CAPTenantStatusApplyConfiguration {
	b.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *CAPTenantStatusApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *CAPTenantStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *CAPTenantStatusApplyConfiguration) WithState(value smesapcomv1alpha1.CAPTenantState) *CAPTenantStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithCurrentCAPApplicationVersionInstance sets the CurrentCAPApplicationVersionInstance field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CurrentCAPApplicationVersionInstance field is set to the value of the last call.
func (b *CAPTenantStatusApplyConfiguration) WithCurrentCAPApplicationVersionInstance(value string) *CAPTenantStatusApplyConfiguration {
	b.CurrentCAPApplicationVersionInstance = &value
	return b
}

// WithPreviousCAPApplicationVersions adds the given value to the PreviousCAPApplicationVersions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PreviousCAPApplicationVersions field.
func (b *CAPTenantStatusApplyConfiguration) WithPreviousCAPApplicationVersions(values ...string) *CAPTenantStatusApplyConfiguration {
	for i := range values {
		b.PreviousCAPApplicationVersions = append(b.PreviousCAPApplicationVersions, values[i])
	}
	return b
}

// WithLastFullReconciliationTime sets the LastFullReconciliationTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LastFullReconciliationTime field is set to the value of the last call.
func (b *CAPTenantStatusApplyConfiguration) WithLastFullReconciliationTime(value v1.Time) *CAPTenantStatusApplyConfiguration {
	b.LastFullReconciliationTime = &value
	return b
}
