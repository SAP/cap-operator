/*
SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and cap-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	smesapcomv1alpha1 "github.com/sap/cap-operator/pkg/apis/sme.sap.com/v1alpha1"
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// DomainStatusApplyConfiguration represents a declarative configuration of the DomainStatus type for use
// with apply.
type DomainStatusApplyConfiguration struct {
	GenericStatusApplyConfiguration `json:",inline"`
	State                           *smesapcomv1alpha1.DomainState `json:"state,omitempty"`
	DnsTarget                       *string                        `json:"dnsTarget,omitempty"`
	GatewayName                     *string                        `json:"gatewayName,omitempty"`
	ObservedDomain                  *string                        `json:"observedDomain,omitempty"`
}

// DomainStatusApplyConfiguration constructs a declarative configuration of the DomainStatus type for use with
// apply.
func DomainStatus() *DomainStatusApplyConfiguration {
	return &DomainStatusApplyConfiguration{}
}

// WithObservedGeneration sets the ObservedGeneration field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedGeneration field is set to the value of the last call.
func (b *DomainStatusApplyConfiguration) WithObservedGeneration(value int64) *DomainStatusApplyConfiguration {
	b.GenericStatusApplyConfiguration.ObservedGeneration = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *DomainStatusApplyConfiguration) WithConditions(values ...*v1.ConditionApplyConfiguration) *DomainStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.GenericStatusApplyConfiguration.Conditions = append(b.GenericStatusApplyConfiguration.Conditions, *values[i])
	}
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *DomainStatusApplyConfiguration) WithState(value smesapcomv1alpha1.DomainState) *DomainStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithDnsTarget sets the DnsTarget field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DnsTarget field is set to the value of the last call.
func (b *DomainStatusApplyConfiguration) WithDnsTarget(value string) *DomainStatusApplyConfiguration {
	b.DnsTarget = &value
	return b
}

// WithGatewayName sets the GatewayName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GatewayName field is set to the value of the last call.
func (b *DomainStatusApplyConfiguration) WithGatewayName(value string) *DomainStatusApplyConfiguration {
	b.GatewayName = &value
	return b
}

// WithObservedDomain sets the ObservedDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ObservedDomain field is set to the value of the last call.
func (b *DomainStatusApplyConfiguration) WithObservedDomain(value string) *DomainStatusApplyConfiguration {
	b.ObservedDomain = &value
	return b
}
